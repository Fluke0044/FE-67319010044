#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Wi-Fi Information
const char* ssid = "vivo 1907";  // Wi-Fi SSID
const char* password = "cover.19";     // Wi-Fi Password

// NETPIE MQTT Information
const char* mqtt_server = "mqtt.netpie.io";  // NETPIE MQTT Broker
const char* client_id = "ff292a58-4090-4ef0-a39a-c83938f67be2";  // Client ID
const char* token = "hBZ3on8ReFyXwabbQj5ZjREwQ5rXoCTK";  // Token
const char* secret = "GcvLqNs3eyK1R7cmvEbi4Ebn65LATSSh";  // Secret
const char* led_state_topic = "led_state";  // Topic for LED state (ON/OFF)
const char* status_topic = "status";  // Topic for updating the device status (ON/OFF)

WiFiClient espClient;
PubSubClient client(espClient);

// Define the LED pin
const int ledPin = LED_BUILTIN;

// Blink settings
unsigned long previousMillis = 0;
const long interval = 500; // LED blink interval in milliseconds (500 ms = 0.5 second)

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Set LED pin as OUTPUT
  pinMode(ledPin, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set up MQTT Server
  client.setServer(mqtt_server, 1883);
  client.setCallback(mqttCallback);

  // Connect to MQTT
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect(client_id, token, secret)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("Failed to connect, rc=");
      Serial.print(client.state());
      delay(1000);
    }
  }
}

// Callback function for MQTT messages (not used in this case)
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  // Empty callback since we're not subscribing to any topic
}

void loop() {
  // Maintain MQTT connection
  if (!client.connected()) {
    while (!client.connected()) {
      Serial.println("Reconnecting to MQTT...");
      if (client.connect(client_id, token, secret)) {
        Serial.println("Reconnected to MQTT");
      } else {
        delay(1000);
      }
    }
  }

  client.loop();  // Check for incoming MQTT messages

  // Automatic LED blinking
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    // Save the last time the LED was updated
    previousMillis = currentMillis;

    // Toggle the LED state
    digitalWrite(ledPin, !digitalRead(ledPin));

    // Publish the current state of the LED to MQTT (ON or OFF)
    if (digitalRead(ledPin) == HIGH) {
      client.publish(led_state_topic, "ON");  // LED is ON
      client.publish(status_topic, "ON");  // Update device status to ON
    } else {
      client.publish(led_state_topic, "OFF");  // LED is OFF
      client.publish(status_topic, "OFF");  // Update device status to OFF
    }
  }
}
